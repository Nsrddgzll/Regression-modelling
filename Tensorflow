{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/TurboNeso/Testrepo/blob/main/Tensorflow\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.layers import Dense, Input\n",
        "from tensorflow.keras import Sequential\n",
        "from tensorflow.keras.losses import MeanSquaredError, BinaryCrossentropy\n",
        "from tensorflow.keras.activations import sigmoid\n",
        "import logging\n",
        "logging.getLogger(\"tensorflow\").setLevel(logging.ERROR)\n",
        "tf.autograph.set_verbosity(0)"
      ],
      "metadata": {
        "id": "Nu63viIAvTSY"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train = np.array([[1.0], [2.0]], dtype=np.float32)\n",
        "Y_train = np.array([[300.0], [500.0]], dtype=np.float32)\n",
        "\n",
        "fig, ax = plt.subplots(1,1)\n",
        "ax.scatter(X_train, Y_train, marker = 'x', c = 'r', label = \"Data points\")\n",
        "ax.legend(fontsize = \"xx-large\")\n",
        "ax.set_ylabel(\" Price in 1000s of Dollars\")\n",
        "ax.set_xlabel(\"Size 1000 sqft\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "A9Vro0nFzogh",
        "outputId": "16890387-7c52-4abd-8ae1-40f496da71cc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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LVu2Q/333ntvh7J58+YFEHfeeWeTsY8ZMyaAOPPMM7crv+GGGwKIG2+8MVN2xhlnhKR46qmnMmUbN26MIUOGRGVlZaxcuTJTvs8++8SYMWMy28uWLQsgdt9993jjjTcy5W+++WZ06dIlLr300kzZSy+9FEBcddVVO8RbVVUVF154YZPX1ZCC/zs0awWgNhr5XvXto+bKfrR86tRktsK6uUgK/GRhoXTr1g2Ad999F4COHTtm7rtv3ryZNWvWsGrVKo4//njWr1/PCy+8kNdxd9ttNyD5xWLdunWsWrWKQw45hKqqKp566qm847vooou22x4/fjx77LEHv//97wHYsmULs2bNYsSIEdTUbJvYsUuXLlx00UV88MEHPPTQQ02e5+STT6Zfv36Z7T59+nDggQfmPUKrqqqKJ554gtdeey2v+mZtkZNCS2TPa15nJ00IsC0ZZE/d/Ktf/YpPfvKTmXvj1dXVnHvuuQB5Dz/961//ymmnnUb37t3p0aMH1dXVVFdXs3bt2mYNYT3ggAO2266oqGDgwIEsW7YMgJUrV/Lee+9lbltlO/jggwEydXPZZ599dijbc889Wb16dV5x/vjHP2bJkiUMHDiQww8/nEsvvZTa2tqmP2jWhjgptEQJpq8tpOeee46OHTsyaNAgAGbOnMm5555L3759mTZtGn/4wx+YPXs2119/PQBbt25t8pjr1q3j2GOPpba2lquuuop7772Xhx56iNmzZ9OrV6+8jlFqHTt2bLA88vx7O+2001i2bBk333wzBx98MLfeeitDhgzZrhPfrK1zR3Nz1Z++dvLkbduw07UYli1bxqOPPsoxxxzDHnvsAcBdd93FoEGDeOCBB7Ybz9/QbZTGZvicO3cub731FnPnzt1uPP+GDRtYs2ZNs2J88cUXGTZsWGZ748aNvPLKK3z6058GoLq6mt13350lS5bs8Nm6srqE11pNzWi61157MW7cOMaNG8eGDRsYOXIk11xzDZdeeqmnaLd2wS2F5irR9LWFsGLFCr785S+zdetWvve972XK635jzv4NecOGDdxwww07HKMukdT/om/oGAA//OEPm91KmDJlynbb06ZNY/369YwaNSpzrpEjRzJnzhwWLlyYqbdp0yamTp1KRUUFJ5xwQrPO2ZjGrnfLli28884725V17dqVAw44gC1btrBu3bqCnN+s3NxS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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Define training data\n",
        "X_train = np.array([[1.0], [2.0]], dtype=np.float32)  # size in 1000 square feet\n",
        "Y_train = np.array([[300.0], [500.0]], dtype=np.float32)  # price in 1000s of dollars\n",
        "\n",
        "# Define model parameters\n",
        "W = np.random.randn(1, 1)  # weight\n",
        "b = np.random.randn(1)  # bias\n",
        "learning_rate = 0.01\n",
        "num_epochs = 10000\n",
        "\n",
        "# Train model\n",
        "for epoch in range(num_epochs):\n",
        "    # Forward pass\n",
        "    Y_pred = np.dot(X_train, W) + b\n",
        "    \n",
        "    # Compute loss\n",
        "    error = Y_pred - Y_train\n",
        "    loss = np.mean(np.square(error))\n",
        "    \n",
        "    # Backward pass\n",
        "    dW = np.dot(X_train.T, error) / X_train.shape[0]\n",
        "    db = np.mean(error)\n",
        "    \n",
        "    # Update parameters\n",
        "    W -= learning_rate * dW\n",
        "    b -= learning_rate * db\n",
        "    \n",
        "    # Print loss every 100 epochs\n",
        "    if epoch % 1000 == 0:\n",
        "        print(f\"Epoch {epoch}, Loss = {loss:.4f}\")\n",
        "\n",
        "# Print final parameters\n",
        "print(f\"W = {W[0, 0]:.4f}, b = {b[0]:.4f}\")\n"
      ],
      "metadata": {
        "id": "6GIGbrIZ0UOv",
        "outputId": "65779de8-63a0-463a-e1d2-c2b10034238c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 0, Loss = 168388.8796\n",
            "Epoch 1000, Loss = 6.4482\n",
            "Epoch 2000, Loss = 1.4982\n",
            "Epoch 3000, Loss = 0.3481\n",
            "Epoch 4000, Loss = 0.0809\n",
            "Epoch 5000, Loss = 0.0188\n",
            "Epoch 6000, Loss = 0.0044\n",
            "Epoch 7000, Loss = 0.0010\n",
            "Epoch 8000, Loss = 0.0002\n",
            "Epoch 9000, Loss = 0.0001\n",
            "W = 199.9931, b = 100.0112\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "linear_layer = tf.keras.layers.Dense(units=1, activation = 'linear',)"
      ],
      "metadata": {
        "id": "i6WCsr9C3UFJ"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "linear_layer.get_weights()"
      ],
      "metadata": {
        "id": "Aa4xwCua4uEy",
        "outputId": "30ef828b-7964-4d1e-f234-161fcd006cdb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "a1 = linear_layer(X_train[0].reshape(1,1)) applies the linear_layer object, which is a single-layer neural network with a linear activation function, to the first training example in X_train.\n",
        "\n",
        "Here's a breakdown of the code:\n",
        "\n",
        "X_train[0] selects the first training example, which is a single value representing the size of a house in 1000 square feet.\n",
        "X_train[0].reshape(1,1) reshapes the input value as a 2D array with shape (1,1), which is required by the linear_layer object. The first dimension represents the number of training examples (in this case, 1), and the second dimension represents the number of input features (in this case, also 1).\n",
        "linear_layer(X_train[0].reshape(1,1)) applies the linear_layer object to the reshaped input value, resulting in a predicted output value a1. Since linear_layer has a linear activation function, the predicted output value is simply a weighted sum of the input features plus a bias term.\n",
        "The output of print(a1) is a NumPy array containing the predicted output value a1. Since linear_layer has a single neuron and a linear activation function, the predicted output value is simply a weighted sum of the input feature plus a bias term:"
      ],
      "metadata": {
        "id": "Y-4lH4CZ8Kb1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a1 = linear_layer(X_train[0].reshape(1,1))"
      ],
      "metadata": {
        "id": "68Kpropc52YC"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(a1)"
      ],
      "metadata": {
        "id": "ePajqc_q8Cry",
        "outputId": "21ec80d2-9a0a-4eb1-dd86-3ec8d620a1ef",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tf.Tensor([[-1.6191882]], shape=(1, 1), dtype=float32)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "w, b = linear_layer.get_weights()"
      ],
      "metadata": {
        "id": "V8D2prGC8TWc"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f' w = {w}, b = {b}')"
      ],
      "metadata": {
        "id": "w2dfuDqk83nx",
        "outputId": "a48e5f98-82cc-4552-e67e-4a75726a1d6a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " w = [[-1.6191882]], b = [0.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "set_w = np.array([[200]])\n",
        "set_b = np.array([100])\n",
        "\n",
        "#set weights\n",
        "linear_layer.set_weights([set_w, set_b])\n",
        "print(linear_layer.get_weights())"
      ],
      "metadata": {
        "id": "Ss3qAPGT8-6g",
        "outputId": "91f449f3-c021-4f43-b5c7-cbc98ed0452a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[array([[200.]], dtype=float32), array([100.], dtype=float32)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a1 = linear_layer(X_train[0].reshape(1,1))\n",
        "print(a1)"
      ],
      "metadata": {
        "id": "HyGdZO0o-BVg",
        "outputId": "7d5fb68f-ab68-4283-e396-f7c4224b7ff5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tf.Tensor([[300.]], shape=(1, 1), dtype=float32)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "alin = np.dot(set_w, X_train[0].reshape(1,1)) +set_b\n",
        "print(alin)"
      ],
      "metadata": {
        "id": "wlAzMaJY-tce",
        "outputId": "49d2e4c0-1c9d-4627-cc48-87d946c4619d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[300.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred_tf = linear_layer(X_train)\n",
        "pred_np = np.dot(X_train, set_w) +set_b"
      ],
      "metadata": {
        "id": "dxqIT0GP-7fI"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f'pred_tf = {pred_tf} \\n pred_np = {pred_np}')"
      ],
      "metadata": {
        "id": "BGSHICP7A9To",
        "outputId": "94e1adee-afe5-43c1-95a0-5dcfa7889c6b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "pred_tf = [[300.]\n",
            " [500.]] \n",
            " pred_np = [[300.]\n",
            " [500.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots(1, 2)\n",
        "for i in range(len(ax)):\n",
        "  ax[i].scatter(X_train, Y_train, marker = 'x', c = 'r', label =\"Data points\")\n",
        "  ax[i].legend()\n",
        "ax[0].plot(X_train, pred_tf, label= \"Tensorflow\" )\n",
        "ax[1].plot(X_train, pred_np, label= \"Numpy\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "nm31q6Y-BZ30",
        "outputId": "461976cd-35b3-434b-9259-8af941243fe4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the predicted prices using TensorFlow and NumPy\n",
        "pred_tf = linear_layer(X_train)\n",
        "pred_np = np.matmul(X_train, w) + b\n",
        "\n",
        "# Create a figure with two subplots side by side\n",
        "fig, ax = plt.subplots(1, 2, figsize=(10, 5))\n",
        "\n",
        "# Plot the data points and the predictions\n",
        "for i in range(len(ax)):\n",
        "    ax[i].scatter(X_train, Y_train, marker='x', c='r', label=\"Data points\")\n",
        "    ax[i].plot(X_train, pred_tf, label=\"TensorFlow\")\n",
        "    ax[i].plot(X_train, pred_np, label=\"NumPy\")\n",
        "    ax[i].legend(fontsize='xx-large')\n",
        "    ax[i].set_xlabel('Size (1000 sqft)', fontsize='xx-large')\n",
        "    ax[i].set_ylabel('Price (in 1000s of dollars)', fontsize='xx-large')\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "VoGZMLw_E3VD",
        "outputId": "ebb2537b-7b90-4524-d721-cbab71d69eba",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 342
        }
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "CIXNSK1bBxeE"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "name": "Welcome To Colaboratory",
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}